/**
 * ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿµÿßÿØŸÇÿ© ÿßŸÑŸÖÿ≠ÿØÿ´ ŸÑŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä
 * ŸäÿØÿπŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ÿßŸÑÿ•ŸäŸÖŸäŸÑ + Google + Twitter
 */

class ProfileAuth {
    constructor() {
        this.currentUser = null;
        this.initializeAuth();
    }

    /**
     * ÿ™ŸáŸäÿ¶ÿ© ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿµÿßÿØŸÇÿ©
     */
    initializeAuth() {
        // Auth state observer
        auth.onAuthStateChanged(async (user) => {
            console.log('üîê Auth state changed:', user ? 'User logged in' : 'User logged out');
            
            this.currentUser = user;
            if (user) {
                console.log('üë§ User signed in:', user.displayName || user.email);
                
                // ÿ™ÿ≠ÿØŸäÿ´ ŸÅŸàÿ±Ÿä ŸÑŸÑŸÄ UI
                this.updateUI(true);
                
                try {
                    // ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÑŸÑÿÆŸÑŸÅŸäÿ© ŸàÿßŸÑÿ™ŸÉÿßŸÖŸÑ ŸÖÿπ ŸÑŸàÿ≠ÿ© ÿßŸÑÿ£ÿØŸÖŸÜ
                    await this.syncWithBackend(user);
                    
                    // ÿ™ÿ≠ŸÖŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
                    await this.loadUserData(user);
                    
                } catch (error) {
                    console.error('‚ùå Error in background auth operations:', error);
                }
                
            } else {
                console.log('üö™ User signed out');
                this.updateUI(false);
            }
        });
    }

    /**
     * ŸÖÿ≤ÿßŸÖŸÜÿ© ŸÖÿπ ÿßŸÑÿÆŸÑŸÅŸäÿ© ŸàŸÑŸàÿ≠ÿ© ÿßŸÑÿ£ÿØŸÖŸÜ
     */
    async syncWithBackend(user) {
        try {
            // ÿ•ÿ±ÿ≥ÿßŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑŸÑÿÆŸÑŸÅŸäÿ© (Node.js)
            const authData = {
                uid: user.uid,
                email: user.email,
                displayName: user.displayName || user.email.split('@')[0],
                photoURL: user.photoURL,
                provider: this.getProviderName(user),
                isEmailVerified: user.emailVerified
            };

            // ŸÖÿ≤ÿßŸÖŸÜÿ© ŸÖÿπ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿÆŸÑŸÅŸä
            const response = await fetch('/api/auth/firebase', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(authData)
            });

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ Backend sync successful:', result.message);
                
                // ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ŸàŸÉŸÜ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ™ŸàŸÅÿ±ÿßŸã
                if (result.data && result.data.token) {
                    if (window.authManager) {
                        window.authManager.login(result.data);
                    }
                }
            }

            // ŸÖÿ≤ÿßŸÖŸÜÿ© ŸÖÿπ ŸÑŸàÿ≠ÿ© ÿßŸÑÿ£ÿØŸÖŸÜ
            if (window.adminIntegration) {
                await window.adminIntegration.syncUserWithAdmin(authData, 'login');
            }

        } catch (error) {
            console.error('‚ùå Backend sync error:', error);
        }
    }

    /**
     * ÿ™ÿ≠ÿØŸäÿ´ Ÿàÿßÿ¨Ÿáÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
     */
    updateUI(isSignedIn) {
        const loginAlert = document.getElementById('loginAlert');
        const profileContent = document.getElementById('profileContent');
        
        if (loginAlert && profileContent) {
            if (isSignedIn) {
                loginAlert.style.display = 'none';
                profileContent.style.display = 'block';
                
                // ÿ™ÿ≠ÿØŸäÿ´ ÿπÿ±ÿ∂ ÿßŸÑŸÜŸÇÿßÿ∑
                if (window.pointsManager) {
                    window.pointsManager.updateAllDisplays();
                }
            } else {
                loginAlert.style.display = 'block';
                profileContent.style.display = 'none';
                
                // ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑÿµŸàÿ±
                this.resetAvatars();
            }
        }
    }

    /**
     * ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑÿµŸàÿ± ÿßŸÑÿ¥ÿÆÿµŸäÿ©
     */
    resetAvatars() {
        const avatarElement = document.getElementById('userAvatar');
        const defaultAvatar = document.getElementById('defaultAvatar');
        
        if (avatarElement && defaultAvatar) {
            avatarElement.style.display = 'none';
            avatarElement.src = '';
            defaultAvatar.style.display = 'flex';
        }
    }

    /**
     * ÿ™ÿ≠ŸÖŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
     */
    async loadUserData(user) {
        try {
            // ÿ™ÿ≠ÿØŸäÿ´ ÿπŸÜÿßÿµÿ± ÿßŸÑŸàÿßÿ¨Ÿáÿ©
            this.updateUserElements(user);
            
            // ÿ™ÿ≠ŸÖŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ© ŸÖŸÜ Firestore ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ™ÿßÿ≠ÿßŸã
            if (typeof db !== 'undefined') {
                const userDoc = await db.collection("users").doc(user.uid).get();
                if (userDoc.exists) {
                    const userData = userDoc.data();
                    this.updateUserElements(userData);
                }
            }
            
        } catch (error) {
            console.error('‚ùå Error loading user data:', error);
        }
    }

    /**
     * ÿ™ÿ≠ÿØŸäÿ´ ÿπŸÜÿßÿµÿ± Ÿàÿßÿ¨Ÿáÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
     */
    updateUserElements(userData) {
        const elements = [
            { id: 'userFullName', value: userData.displayName || 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ' },
            { id: 'userEmail', value: userData.email || 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ' },
            { id: 'userProvider', value: this.getProviderDisplayName(userData.provider || userData.providerId) },
            { id: 'userLastLogin', value: this.formatDate(userData.lastLoginAt || userData.metadata?.lastSignInTime) },
            { id: 'userMemberSince', value: this.formatDate(userData.createdAt || userData.metadata?.creationTime) }
        ];
        
        elements.forEach(element => {
            const el = document.getElementById(element.id);
            if (el) {
                el.textContent = element.value;
            }
        });
        
        // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿµŸàÿ±ÿ© ÿßŸÑÿ¥ÿÆÿµŸäÿ©
        this.updateAvatar(userData.photoURL);
    }

    /**
     * ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿµŸàÿ±ÿ© ÿßŸÑÿ¥ÿÆÿµŸäÿ©
     */
    updateAvatar(photoURL) {
        const avatarElement = document.getElementById('userAvatar');
        const defaultAvatar = document.getElementById('defaultAvatar');
        
        if (avatarElement && defaultAvatar) {
            if (photoURL) {
                avatarElement.src = photoURL;
                avatarElement.style.display = 'block';
                defaultAvatar.style.display = 'none';
            } else {
                avatarElement.style.display = 'none';
                defaultAvatar.style.display = 'flex';
            }
        }
    }

    /**
     * ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßÿ≥ŸÖ ŸÖŸÇÿØŸÖ ÿßŸÑÿÆÿØŸÖÿ©
     */
    getProviderName(user) {
        if (user.providerData && user.providerData.length > 0) {
            return user.providerData[0].providerId;
        }
        return 'email';
    }

    /**
     * ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßÿ≥ŸÖ ŸÖŸÇÿØŸÖ ÿßŸÑÿÆÿØŸÖÿ© ŸÑŸÑÿπÿ±ÿ∂
     */
    getProviderDisplayName(providerId) {
        switch (providerId) {
            case 'google.com': return 'Google';
            case 'twitter.com': return 'Twitter';
            case 'password': return 'ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä';
            case 'email': return 'ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä';
            default: return 'ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ';
        }
    }

    /**
     * ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑÿ™ÿßÿ±ŸäÿÆ
     */
    formatDate(timestamp) {
        if (!timestamp) return 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ';
        
        let date;
        if (timestamp.seconds) {
            // Firestore Timestamp
            date = new Date(timestamp.seconds * 1000);
        } else if (typeof timestamp === 'string') {
            date = new Date(timestamp);
        } else {
            date = timestamp;
        }
        
        return date.toLocaleDateString('ar-SA', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    /**
     * ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨
     */
    async logout() {
        try {
            await auth.signOut();
            
            // ŸÖÿ≥ÿ≠ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©
            if (window.authManager) {
                window.authManager.logout('manual');
            }
            
            if (window.pointsManager) {
                window.pointsManager.resetPoints();
            }
            
            console.log('‚úÖ Logout successful');
            
        } catch (error) {
            console.error('‚ùå Logout error:', error);
        }
    }

    /**
     * ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ≠ÿßŸÑŸä
     */
    getCurrentUser() {
        return this.currentUser;
    }

    /**
     * ŸÅÿ≠ÿµ ÿ≠ÿßŸÑÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ
     */
    isLoggedIn() {
        return !!this.currentUser;
    }
}

// ÿ™ÿµÿØŸäÿ± ŸÑŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿπÿßŸÖ
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ProfileAuth;
}

// ÿ™ŸáŸäÿ¶ÿ© ÿπŸÜÿØ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿµŸÅÿ≠ÿ©
document.addEventListener('DOMContentLoaded', () => {
    // ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ™ÿ≠ŸÖŸäŸÑ Firebase
    const initProfileAuth = () => {
        if (typeof firebase !== 'undefined' && typeof auth !== 'undefined') {
            window.profileAuth = new ProfileAuth();
            console.log('üîê Profile Auth initialized');
        } else {
            setTimeout(initProfileAuth, 100);
        }
    };
    
    initProfileAuth();
});